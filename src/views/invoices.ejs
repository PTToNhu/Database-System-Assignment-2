<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="/css/invoices.css">
    <title>Invoice Management</title>
</head>

<body>
    <nav>
        <a href="/">Home</a>
        <a href="/invoice" class="active">Invoice</a>
        <a href="/revenue">Revenue</a>
    </nav>

    <!-- Filter Form -->
    <form id="filterForm" class="filter-form" action="/invoice" method="POST">
        <h1>Filter Invoice List by Time and Location</h1>
        <label for="startDate">Start Date:</label>
        <input type="date" id="startDate" name="startDate" required>

        <label for="endDate">End Date:</label>
        <input type="date" id="endDate" name="endDate" required>

        <label for="branch">Branch:</label>
        <select id="branch" name="branch">
            <option value="">-- Select Branch (Optional) --</option>
            <% branches.forEach(branch=> { %>
                <option value="<%= branch.MACHINHANH %>">
                    <%= branch.MACHINHANH %>
                </option>
                <% }); %>
        </select>

        <div class="radio-group">
            <label for="sortByProfit">Sort by Total Amount:</label>
            <div>
                <input type="radio" id="ascending" name="sortByProfit" value="1" required>
                <label for="ascending">Ascending</label>
            </div>
            <div>
                <input type="radio" id="descending" name="sortByProfit" value="0" required>
                <label for="descending">Descending</label>
            </div>
        </div>

        <button type="submit">Filter</button>
    </form>

    <!-- Action Popup -->
    <div id="actionPopup" class="popup">
        <div class="popup-content">
            <h2>What action do you want to perform?</h2>
            <div class="button-container">
                <button id="editButton">Edit</button>
                <button id="deleteButton">Delete</button>
            </div>
            <span id="closePopup" class="close">&times;</span>
        </div>
    </div>

    <!-- Update Type Popup -->
    <div id="updateTypePopup" class="popup">
        <div class="popup-content">
            <h2>What do you want to update?</h2>
            <div class="button-container">
                <button id="updateCustomerButton">Customer Info</button>
                <button id="updateEmployeeButton">Employee Info</button>
            </div>
            <span id="closeUpdateTypePopup" class="close">&times;</span>
        </div>
    </div>

    <!-- Customer Update Form -->
    <div id="customerUpdatePopup" class="popup">
        <div class="popup-content">
            <h2>Update Customer Info</h2>
            <label for="customerPhone">Customer Phone:</label>
            <input type="text" id="customerPhone" name="customerPhone" required>
            <label for="customerName">Customer Name:</label>
            <input type="text" id="customerName" name="customerName" required>
            <button id="submitCustomerUpdate">Submit</button>
            <span id="closeCustomerUpdatePopup" class="close">&times;</span>
        </div>
    </div>

    <!-- Employee Update Form -->
    <div id="employeeUpdatePopup" class="popup">
        <div class="popup-content">
            <h2>Update Employee Info</h2>
            <label for="employeeID">Employee ID:</label>
            <input type="text" id="employeeID" name="employeeID" required>
            <label for="employeeName">Employee Name:</label>
            <input type="text" id="employeeName" name="employeeName" required>
            <button id="submitEmployeeUpdate">Submit</button>
            <span id="closeEmployeeUpdatePopup" class="close">&times;</span>
        </div>
    </div>

    <% if (invoices && invoices.length> 0) { %>
        <% if (invoices[0].hasOwnProperty('Message')) { %>
            <h2 class="h2-title">
                <%= invoices[0].Message %>
            </h2>
            <% } else { %>
                <h1 class="h1-title">Invoice Table</h1>
                <table class="invoice-table">
                    <thead>
                        <tr>
                            <th>Invoice ID</th>
                            <th>Date</th>
                            <th>Customer Phone</th>
                            <th>Customer Name</th>
                            <% if (invoices[0].hasOwnProperty('MACHINHANH')) { %>
                                <th>Branch Code</th>
                                <th>Branch Name</th>
                                <% } %>
                                    <th>Employee ID</th>
                                    <th>Employee Name</th>
                                    <th>Total Amount</th>
                        </tr>
                    </thead>
                    <tbody>
                        <% invoices.forEach(invoice=> { %>
                            <tr>
                                <td>
                                    <%= invoice.MAHOADON %>
                                </td>
                                <td>
                                    <%= new Date(invoice.THOIGIAN).toLocaleDateString('en-US') %>
                                </td>
                                <td>
                                    <%= invoice.SDTKHACHHANG %>
                                </td>
                                <td>
                                    <%= invoice.TENKHACHHANG %>
                                </td>
                                <% if (invoice.hasOwnProperty('MACHINHANH')) { %>
                                    <td>
                                        <%= invoice.MACHINHANH %>
                                    </td>
                                    <td>
                                        <%= invoice.TENCHINHANH %>
                                    </td>
                                    <% } %>
                                        <td>
                                            <%= invoice.MANV %>
                                        </td>
                                        <td>
                                            <%= invoice.TENNHANVIEN %>
                                        </td>
                                        <td>
                                            <%= Number(invoice.TONGTIENHOADON).toFixed(2) %>
                                        </td>
                            </tr>
                            <% }) %>
                    </tbody>
                </table>
                <% } %>
                    <% } %>

                        <script>
                            document.addEventListener('DOMContentLoaded', () => {
                                const startDateInput = document.getElementById('startDate');
                                const endDateInput = document.getElementById('endDate');
                                const branchInput = document.getElementById('branch');

                                const savedStartDate = localStorage.getItem('startDate');
                                const savedEndDate = localStorage.getItem('endDate');
                                const saveBranch = localStorage.getItem('branchInput');

                                if (savedStartDate) {
                                    startDateInput.value = savedStartDate;
                                }
                                if (savedEndDate) {
                                    endDateInput.value = savedEndDate;
                                }
                                if (saveBranch) {
                                    branchInput.value = saveBranch;
                                }

                                // CÃ¡c pop-up
                                const actionPopup = document.getElementById('actionPopup');
                                const updateTypePopup = document.getElementById('updateTypePopup');
                                const customerUpdatePopup = document.getElementById('customerUpdatePopup');
                                const employeeUpdatePopup = document.getElementById('employeeUpdatePopup');
                                const closePopup = document.getElementById('closePopup');
                                const closeUpdateTypePopup = document.getElementById('closeUpdateTypePopup');
                                const closeCustomerUpdatePopup = document.getElementById('closeCustomerUpdatePopup');
                                const closeEmployeeUpdatePopup = document.getElementById('closeEmployeeUpdatePopup');


                                const editButton = document.getElementById('editButton');
                                const deleteButton = document.getElementById('deleteButton');

                                // Update Employee
                                const submitEmployeeUpdate = document.getElementById('submitEmployeeUpdate');
                                const employeeIDInput = document.getElementById('employeeID');
                                const employeeNameInput = document.getElementById('employeeName');

                                // Update Cus
                                const submitCustomerUpdate = document.getElementById('submitCustomerUpdate');
                                const customerPhoneInput = document.getElementById('customerPhone');
                                const customerNameInput = document.getElementById('customerName');

                                let selectedRow = null;

                                const tableRows = document.querySelectorAll('.invoice-table tbody tr');
                                tableRows.forEach(row => {
                                    row.addEventListener('click', () => {
                                        selectedRow = row;
                                        actionPopup.style.display = 'flex';
                                    });
                                });

                                closePopup.addEventListener('click', () => {
                                    actionPopup.style.display = 'none';
                                });

                                closeUpdateTypePopup.addEventListener('click', () => {
                                    updateTypePopup.style.display = 'none';
                                });

                                closeCustomerUpdatePopup.addEventListener('click', () => {
                                    customerUpdatePopup.style.display = 'none';
                                });

                                closeEmployeeUpdatePopup.addEventListener('click', () => {
                                    employeeUpdatePopup.style.display = 'none';
                                });

                                document.getElementById('filterForm').addEventListener('submit', async function (event) {

                                    localStorage.setItem('startDate', this.startDate.value);
                                    localStorage.setItem('endDate', this.endDate.value);
                                    localStorage.setItem('branch', this.branch.value);

                                    const ascendingInput = document.getElementById('ascending');
                                    const descendingInput = document.getElementById('descending');

                                    let sortByProfitValue = null;

                                    // Kiá»m tra xem cÃ³ checkbox nÃ o ÄÆ°á»£c chá»n khÃ´ng
                                    if (ascendingInput.checked) {
                                        sortByProfitValue = 1; // Náº¿u chá»n Ascending
                                    } else if (descendingInput.checked) {
                                        sortByProfitValue = 0; // Náº¿u chá»n Descending
                                    }

                                    // LÆ°u giÃ¡ trá» vÃ o localStorage
                                    localStorage.setItem('sortByProfit', sortByProfitValue);

                                    // Xá»­ lÃ½ dá»¯ liá»u form
                                    const formData = new FormData(this);
                                    formData.set('sortByProfit', sortByProfitValue); // Ghi ÄÃ¨ giÃ¡ trá» cho sortByProfit

                                    const formObject = {};
                                    formData.forEach((value, key) => {
                                        formObject[key] = value;
                                    });

                                    console.log('Form data:', formObject);

                                    // Gá»­i request
                                    try {
                                        const response = await fetch(this.action, {
                                            method: this.method,
                                            body: formData,
                                        });

                                        if (response.ok) {
                                            const result = await response.text();
                                            document.body.innerHTML = result;
                                        } else {
                                            console.error('Error sending request:', response.statusText);
                                        }
                                    } catch (error) {
                                        console.error('Request error:', error);
                                    }
                                });

                                // NÃºt xÃ³a hÃ³a ÄÆ¡n
                                deleteButton.addEventListener('click', () => {
                                    if (selectedRow) {
                                        const invoiceId = selectedRow.querySelector('td:nth-child(1)').textContent;

                                        if (confirm('Are you sure?')) {
                                            fetch(`/api/deleteInvoice/${invoiceId}`, {
                                                method: 'DELETE',
                                            })
                                                .then(response => response.json())
                                                .then(data => {
                                                    if (data.success) {
                                                        alert('Invoice deleted successfully');
                                                        selectedRow.remove();
                                                    } else {
                                                        alert('Failed to delete invoice: ' + data.message);
                                                    }
                                                })
                                                .catch(error => {
                                                    console.error('Error:', error);
                                                    alert('An error occurred while deleting the invoice.');
                                                });
                                        }
                                        actionPopup.style.display = 'none';
                                    }
                                });

                                submitEmployeeUpdate.addEventListener('click', () => {
                                    const employeeID = employeeIDInput.value.trim();
                                    const employeeName = employeeNameInput.value.trim();

                                    // Kiá»m tra náº¿u cÃ³ input bá» bá» trá»ng
                                    if (!employeeID || !employeeName) {
                                        alert('Please fill in all the fields for Employee Info.');
                                        return; // NgÄn viá»c tiáº¿p tá»¥c náº¿u cÃ³ lá»i
                                    }

                                    if (selectedRow) {
                                        const invoiceId = selectedRow.querySelector('td:nth-child(1)').textContent.trim();

                                        fetch(`/api/updateEmployee`, {
                                            method: 'PUT',
                                            headers: {
                                                'Content-Type': 'application/json',
                                            },
                                            body: JSON.stringify({
                                                employeeID: employeeID,
                                                employeeName: employeeName,
                                                invoiceID: invoiceId,
                                            }),
                                        })
                                            .then(response => response.json())
                                            .then(data => {
                                                if (data.recordset[0].Code === 'Success') {
                                                    // Cáº­p nháº­t thÃ´ng tin trong báº£ng
                                                    alert('Updated successfully!');
                                                } else {
                                                    alert(data.recordset[0].Message);
                                                }
                                            })
                                            .catch(error => {
                                                console.error('Error:', error);
                                                alert('An error occurred while updating employee information.');
                                            });

                                        employeeUpdatePopup.style.display = 'none';
                                    }
                                });

                                editButton.addEventListener('click', () => {
                                    if (selectedRow) {
                                        actionPopup.style.display = 'none';
                                        updateTypePopup.style.display = 'flex';
                                    }
                                });

                                document.getElementById('updateCustomerButton').addEventListener('click', () => {
                                    if (selectedRow) {
                                        updateTypePopup.style.display = 'none';
                                        customerUpdatePopup.style.display = 'flex';
                                    }
                                });

                                submitCustomerUpdate.addEventListener('click', () => {
                                    const customerPhone = customerPhoneInput.value.trim();
                                    const customerName = customerNameInput.value.trim();

                                    // Kiá»m tra náº¿u cÃ³ input bá» bá» trá»ng
                                    if (!customerPhone || !customerName) {
                                        alert('Please fill in all the fields for Customer Info.');
                                        return; // NgÄn viá»c tiáº¿p tá»¥c náº¿u cÃ³ lá»i
                                    }

                                    if (selectedRow) {
                                        const invoiceId = selectedRow.querySelector('td:nth-child(1)').textContent.trim();

                                        fetch(`/api/updateCustomer`, {
                                            method: 'PUT',
                                            headers: {
                                                'Content-Type': 'application/json',
                                            },
                                            body: JSON.stringify({
                                                customerPhone: customerPhone,
                                                customerName: customerName,
                                                invoiceID: invoiceId,
                                            }),
                                        })
                                            .then(response => response.json())
                                            .then(data => {
                                                if (data.recordset[0].Code === 'Success') {
                                                    alert('Updated successfully!');

                                                } else {
                                                    alert(data.recordset[0].Message);
                                                }
                                            })
                                            .catch(error => {
                                                console.error('Error:', error);
                                                alert('An error occurred while updating employee information.');
                                            });

                                        customerUpdatePopup.style.display = 'none'; // ÄÃ³ng popup
                                    }
                                });


                                document.getElementById('updateEmployeeButton').addEventListener('click', () => {
                                    if (selectedRow) {
                                        updateTypePopup.style.display = 'none';
                                        employeeUpdatePopup.style.display = 'flex';
                                    }
                                });
                            });
                        </script>
</body>

</html>